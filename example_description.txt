### Scenario: Logging System without Singleton

#### Context:
In a large application, thereâ€™s a `Logger` class responsible for logging messages across various modules. However, the Singleton pattern was not used, leading to multiple instances of the `Logger` class being created. This results in inconsistent logging behavior and difficulty managing log outputs.

### Incorrect Implementation

```csharp
// Logger class
public class Logger
{
    private List<string> _logEntries;

    public Logger()
    {
        _logEntries = new List<string>();
        Console.WriteLine("Logger initialized.");
    }

    public void Log(string message)
    {
        _logEntries.Add($"{DateTime.Now}: {message}");
    }

    public void ShowLog()
    {
        foreach (var entry in _logEntries)
        {
            Console.WriteLine(entry);
        }
    }
}

// UserManager class
public class UserManager
{
    private Logger _logger;

    public UserManager(Logger logger)
    {
        _logger = logger;
    }

    public void CreateUser(string username)
    {
        // Simulate user creation
        Console.WriteLine($"User '{username}' created.");
        _logger.Log($"User '{username}' created.");
    }
}

// OrderManager class
public class OrderManager
{
    private Logger _logger;

    public OrderManager(Logger logger)
    {
        _logger = logger;
    }

    public void CreateOrder(int orderId)
    {
        // Simulate order creation
        Console.WriteLine($"Order '{orderId}' created.");
        _logger.Log($"Order '{orderId}' created.");
    }
}

// Program class demonstrating the problem
public class Program
{
    public static void Main()
    {
        // Instance 1 of Logger used by UserManager
        Logger logger1 = new Logger();
        UserManager userManager = new UserManager(logger1);
        userManager.CreateUser("Alice");

        // Instance 2 of Logger used by OrderManager
        Logger logger2 = new Logger();
        OrderManager orderManager = new OrderManager(logger2);
        orderManager.CreateOrder(1234);

        // Show logs from both loggers
        Console.WriteLine("\nLogger 1 Entries:");
        logger1.ShowLog();  // Only shows logs related to UserManager

        Console.WriteLine("\nLogger 2 Entries:");
        logger2.ShowLog();  // Only shows logs related to OrderManager
    }
}
```

### Issues and Mistakes:

1. **Lack of Singleton Implementation:**
   - **Problem:** Both `UserManager` and `OrderManager` create their own instances of `Logger`. This leads to multiple `Logger` instances, each maintaining its own separate list of log entries.
   - **Effect:** Logs are scattered across different instances, making it difficult to get a consolidated view of all the logs. This also results in inconsistent logging behavior across different parts of the application.

2. **Violation of **Single Responsibility Principle (SRP)**:**
   - **Problem:** The `Logger` class is responsible for both managing log entries and providing the functionality to display the logs. These responsibilities could be separated.
   - **Effect:** This makes the `Logger` class harder to maintain and extend. For instance, if the logging mechanism changes (e.g., logging to a file or database), the `Logger` class would need significant modifications.

3. **Poor **Encapsulation**:**
   - **Problem:** The `Logger` class directly manages a list of log entries. There is no abstraction over how logs are stored or accessed.
   - **Effect:** This tight coupling between the logger's internal state and its methods can lead to issues if the storage mechanism needs to change in the future.

4. **Improper Class Collaboration:**
   - **Problem:** Each manager class (`UserManager`, `OrderManager`) depends on its own instance of `Logger`. This creates unnecessary duplication of logging logic.
   - **Effect:** This duplication makes it harder to maintain consistent logging across the system and increases the risk of errors or omissions in logging.

### Why Singleton Would Be Beneficial Here:

- **Consistency:** A Singleton `Logger` would ensure that all log entries from different parts of the application are stored in a single place. This would provide a consistent and complete log output.
  
- **Resource Management:** Creating multiple instances of `Logger` is unnecessary and wasteful, particularly if the `Logger` manages resources such as file handles or network connections.

- **Global Access:** In a logging system, global access to a single `Logger` instance ensures that all components of the application can log messages consistently without needing to manage their own logging instances.

#### Summary:

In this example, the absence of the Singleton pattern in the `Logger` class leads to scattered and inconsistent logging behavior across different parts of the application. This situation clearly demonstrates the need for a Singleton pattern to maintain consistency and ensure that all logs are managed centrally, following OOP principles more effectively.
